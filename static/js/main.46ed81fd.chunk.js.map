{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Rating","rating","this","props","data-testid","defaultProps","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","htmlFor","type","name","value","onChange","checked","id","AddMovie","state","genre","handleChange","bind","resetState","handleClick","target","setState","cols","rows","onClick","onSubmit","renderTitle","renderSubtitle","renderImagePath","renderStoryline","renderRating","renderGenre","MovieLibrary","filter","toLowerCase","includes","bookmarked","filterSearch","filterBookmarked","objeto","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46ed81fd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies\n          .map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n    return (\n      <form data-testid=\"search-bar-form\">\n        <label htmlFor=\"searchText\" data-testid=\"text-input-label\" className=\"search\">\n          Inclui o texto:\n          <input\n            type=\"text\"\n            name=\"searchText\"\n            value={ searchText }\n            onChange={ onSearchTextChange }\n            data-testid=\"text-input\"\n            className\n          />\n        </label>\n        <label htmlFor=\"checkbox\" data-testid=\"checkbox-input-label\" className=\"search\">\n          Mostrar somente favoritos\n          <input\n            type=\"checkbox\"\n            name=\"checkbox\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n            data-testid=\"checkbox-input\"\n          />\n        </label>\n        <label htmlFor=\"genre\" data-testid=\"select-input-label\" className=\"search\">\n          Filtrar por gênero\n          <select\n            name=\"genre\"\n            id=\"genre\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n            data-testid=\"select-input\"\n          >\n            <option value=\"\" data-testid=\"select-option\">Todos</option>\n            <option value=\"action\" data-testid=\"select-option\">Ação</option>\n            <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n            <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.resetState = this.resetState.bind(this);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    this.resetState();\n  }\n\n  resetState() {\n    this.setState(() => ({\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    }));\n  }\n\n  renderTitle(title) {\n    return (\n      <label\n        htmlFor=\"title\"\n        name=\"title\"\n        data-testid=\"title-input-label\"\n      >\n        Título\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={ title }\n          onChange={ this.handleChange }\n          data-testid=\"title-input\"\n        />\n      </label>\n    );\n  }\n\n  renderSubtitle(subtitle) {\n    return (\n      <label\n        htmlFor=\"subtitle\"\n        name=\"subtitle\"\n        data-testid=\"subtitle-input-label\"\n      >\n        Subtítulo\n        <input\n          type=\"text\"\n          name=\"subtitle\"\n          value={ subtitle }\n          onChange={ this.handleChange }\n          data-testid=\"subtitle-input\"\n        />\n      </label>\n    );\n  }\n\n  renderImagePath(imagePath) {\n    return (\n      <label\n        htmlFor=\"imagePath\"\n        name=\"imagePath\"\n        data-testid=\"image-input-label\"\n      >\n        Imagem\n        <input\n          type=\"text\"\n          name=\"imagePath\"\n          value={ imagePath }\n          onChange={ this.handleChange }\n          data-testid=\"image-input\"\n        />\n      </label>\n    );\n  }\n\n  renderStoryline(storyline) {\n    return (\n      <label\n        htmlFor=\"storyline\"\n        name=\"storyline\"\n        data-testid=\"storyline-input-label\"\n      >\n        Sinopse\n        <textarea\n          name=\"storyline\"\n          value={ storyline }\n          cols=\"30\"\n          rows=\"10\"\n          onChange={ this.handleChange }\n          data-testid=\"storyline-input\"\n        />\n      </label>\n    );\n  }\n\n  renderRating(rating) {\n    return (\n      <label\n        htmlFor=\"rating\"\n        name=\"rating\"\n        data-testid=\"rating-input-label\"\n      >\n        Avaliação\n        <input\n          type=\"number\"\n          name=\"rating\"\n          value={ rating }\n          onChange={ this.handleChange }\n          data-testid=\"rating-input\"\n        />\n      </label>\n    );\n  }\n\n  renderGenre(genre) {\n    return (\n      <label\n        htmlFor=\"genre\"\n        data-testid=\"genre-input-label\"\n      >\n        Gênero\n        <select\n          name=\"genre\"\n          value={ genre }\n          onChange={ this.handleChange }\n          data-testid=\"genre-input\"\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    const {\n      title, subtitle, imagePath, storyline, rating, genre,\n    } = this.state;\n    const { onClick } = this.props;\n\n    return (\n      <form\n        onSubmit={ this.resetState }\n        data-testid=\"add-movie-form\"\n      >\n        { this.renderTitle(title) }\n        { this.renderSubtitle(subtitle) }\n        { this.renderImagePath(imagePath) }\n        { this.renderStoryline(storyline) }\n        { this.renderRating(rating) }\n        { this.renderGenre(genre) }\n\n        {/* Requisito 14 feito na monitoria individual com a\n        ajuda do monitor M. Daniel! */}\n        <button\n          type=\"button\"\n          onClick={ () => {\n            onClick(this.state);\n            this.handleClick();\n          } }\n          data-testid=\"send-button\"\n        >\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n\n    this.onSelectedGenreChange = this.onSelectedGenreChange.bind(this);\n\n    this.onSearchTextChange = this.onSearchTextChange.bind(this);\n\n    this.onBookmarkedChange = this.onBookmarkedChange.bind(this);\n  }\n\n  onSelectedGenreChange({ target: { value } }) {\n    this.setState({ selectedGenre: value });\n  }\n\n  onSearchTextChange({ target: { value } }) {\n    this.setState({ searchText: value });\n  }\n\n  onBookmarkedChange({ target: { checked } }) {\n    this.setState({ bookmarkedOnly: checked });\n  }\n\n  // Requisito 18 - feito uma função para filtrar os filmes com a ajuda do monitor M. Daniel na monitoria individual\n  filterSearch() {\n    const { movies, searchText } = this.state;\n    const movieList = movies.filter((movie) => movie.title\n      .toLowerCase().includes(searchText.toLowerCase())\n    || movie.subtitle\n      .toLowerCase().includes(searchText.toLowerCase())\n    || movie.storyline\n      .toLowerCase().includes(searchText.toLowerCase()));\n    return movieList;\n  }\n\n  filterBookmarked() {\n    const { movies } = this.state;\n    const movieList = movies.filter((movie) => movie.bookmarked);\n    return movieList;\n  }\n\n  filterGenre() {\n    const { movies, selectedGenre } = this.state;\n    const movieList = movies.filter((movie) => movie.genre === selectedGenre);\n    return movieList;\n  }\n\n  render() {\n    const onClick = (objeto) => objeto;\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n    return (\n      <div>\n        <h2> My awesome movie library </h2>\n        <SearchBar\n          searchText={ searchText }\n          bookmarkedOnly={ bookmarkedOnly }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.onSelectedGenreChange }\n          onSearchTextChange={ this.onSearchTextChange }\n          onBookmarkedChange={ this.onBookmarkedChange }\n        />\n        <MovieList\n          movies={ this.filterSearch()\n          || this.filterBookmarked()/*\n          || filterGenre() */ }\n        />\n        <AddMovie onClick={ onClick } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport MovieLibrary from './components/MovieLibrary';\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}